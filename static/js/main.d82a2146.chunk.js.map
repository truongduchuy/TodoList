{"version":3,"sources":["List.js","App.js","serviceWorker.js","index.js"],"names":["list","onDelete","onEdit","className","map","item","index","key","name","priority","endsAt","onClick","App","state","todoList","todoItem","isAdd","indexUpdate","initialTodoItem","_handleChange","value","setState","_handleSubmit","e","preventDefault","alert","_handleDelete","filter","i","_handleEdit","find","_handleCancel","this","onSubmit","type","onChange","target","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d82a2146.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default ({ list, onDelete, onEdit }) => {\r\n    return (\r\n        <div className=\"box__table\">\r\n            <div className=\"row\">\r\n                <h4>Name</h4>\r\n                <h4>Priority</h4>\r\n                <h4>End At</h4>\r\n                <h4>Actions</h4>\r\n            </div>\r\n            {list.map((item, index) =>\r\n                <div key={index} className=\"row\">\r\n                    <div>{item.name}</div>\r\n                    <div>{item.priority}</div>\r\n                    <div>{item.endsAt}</div>\r\n                    <div>\r\n                        <button onClick={() => onEdit(index)}>edit</button>\r\n                        <button onClick={() => onDelete(index)}>delete</button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};","import React, { Component } from 'react';\nimport './App.scss';\nimport TodoList from './List';\n\nclass App extends Component {\n  state = {\n    todoList: [],\n    todoItem: { name: \"\", priority: 1, endsAt: \"\" },\n    isAdd: true,\n    indexUpdate: 0\n  }\n\n  initialTodoItem = { name: \"\", priority: 1, endsAt: \"\" };\n\n  _handleChange = (key, value) => {\n    this.setState({ todoItem: { ...this.state.todoItem, [key]: value } });\n  }\n\n  _handleSubmit = (e) => {\n    e.preventDefault();\n    const { todoList, todoItem, indexUpdate, isAdd } = this.state;\n    const { name, endsAt } = todoItem;\n\n    if (name === \"\" || endsAt === \"\") {\n      if (name === \"\")\n        alert(\"please enter your name!\");\n      else alert(\"End At is invalid!\")\n    }\n    else {\n      if (isAdd) {\n        this.setState({ todoList: [...todoList, todoItem] });\n      }\n      else {\n        this.setState({\n          todoList: todoList.map((item, index) =>\n            index === indexUpdate ? todoItem : item\n          ),\n          isAdd: true\n        });\n      }\n    }\n  }\n\n  _handleDelete = (index) => {\n    this.setState({ todoList: this.state.todoList.filter((item, i) => i !== index) });\n  }\n\n  _handleEdit = (index) => {\n    this.setState({ isAdd: false, indexUpdate: index, todoItem: this.state.todoList.find((item, i) => i === index) });\n  }\n\n  _handleCancel = () => {\n    this.setState({ isAdd: true, indexUpdate: 0, todoItem: this.initialTodoItem })\n  }\n\n  render() {\n    const { todoList, todoItem, isAdd } = this.state;\n    const { name, priority, endsAt } = todoItem;\n    const priorityOptions = [1, 2, 3, 4];\n\n    return (\n      <div className=\"box\">\n        <h2>TodoList</h2>\n        <form className=\"box__form\" onSubmit={this._handleSubmit}>\n          <label>Name</label>\n          <input type=\"text\" value={name} onChange={(e) => this._handleChange(\"name\", e.target.value)} />\n          <label>Priority</label>\n          <select className=\"priority\" value={priority} onChange={e => this._handleChange(\"priority\", e.target.value)}>\n            {priorityOptions.map((item, index) =>\n              <option key={index} value={item}>{item}</option>\n            )}\n          </select>\n          <label>Ends At</label>\n          <input type=\"date\" value={endsAt} onChange={e => this._handleChange('endsAt', e.target.value)} />\n          <div>\n            <button type=\"submit\">{isAdd ? 'Add' : 'Save'}</button>\n            {!isAdd && <button onClick={this._handleCancel} type=\"button\">Cancel</button>}\n          </div>\n        </form>\n        {todoList.length > 0 && < TodoList list={todoList} onDelete={this._handleDelete} onEdit={this._handleEdit} />}\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}